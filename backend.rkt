#lang racket
(define (cardGame currentDeck)
  (define currentGame '())
  (define (myCard suit rank)
    (cons suit rank)
    )
  (define newDeck
    (begin
      (set! currentDeck '())
      (set! currentDeck (append currentDeck (append (append (append (map (lambda (n) (myCard 1 n)) '(1 2 3 4 5 6 7 8 9 10 11 12 13))
            (map (lambda (n) (myCard 2 n)) '(1 2 3 4 5 6 7 8 9 10 11 12 13)))
            (map (lambda (n) (myCard 3 n)) '(1 2 3 4 5 6 7 8 9 10 11 12 13)))
            (map (lambda (n) (myCard 4 n)) '(1 2 3 4 5 6 7 8 9 10 11 12 13)))
    ))
      currentDeck))
  (define displayDeck
    currentDeck)
  (define (cardRank myCard)
    (cdr myCard)
    )
  (define (cardSuit myCard)
    (car myCard)
    )
  (define (cardMatch? pos1 pos2)
    (equal? (cardRank (list-ref currentGame pos1))
            (cardRank (list-ref currentGame pos2))
    ))
  (define (myGame numCards)
    (define (myGameHelper count end)
      (if(> count end)
         '()
         (cons (list-ref currentDeck (random(length currentDeck)))
               (myGameHelper (add1 count) end))))
    (set! currentGame (myGameHelper 1 numCards))
    currentGame
    )
  (define (msgHandler msg)
    (cond ((equal? msg 'newDeck) newDeck)
          ((equal? msg 'displayDeck) displayDeck)
          ((equal? msg 'cardMatch?) cardMatch?)
          ((equal? msg 'createGame) myGame)
          ((equal? msg 'displayGame) currentGame)
          (else(display "Give a proper command: ")))
    )
    msgHandler
  )